I"Î<p>At first I find autoloading a tricky thing to do, the way Composer does and frameworks but not anymore.
Today I will share the secret on how classes are loaded on demand.</p>

<p>You can actually gain access to a class by including them in your bootstrap file but what if we have a lot of files? This time we will do autoloading and bootstrap only the files needed.
i.e.</p>

<p><code class="language-plaintext highlighter-rouge">index.php</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'bootstrap.php';

// initialized class here and it will be autoloaded
$foo = new Foo;
$bar = new Bar;
</code></pre></div></div>

<p>Letâ€™s not imagine, but letâ€™s say this will be our working directory. Our target classes to be autolaoded will be under the services folder.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/project
	/services
		Foo.php
		Bar.php
		...
	bootstrap.php
	index.php
</code></pre></div></div>

<p>Letâ€™s now reveal our <code class="language-plaintext highlighter-rouge">bootstrap.php</code> file.</p>

<p><code class="language-plaintext highlighter-rouge">bootstrap.php</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spl_autoload_register(function($class) {
	if(file_exists($path = __DIR__.'/services/'.$class.'.php')) 
	{
		require_once $path;
		return true;
	}
	return false;
});
</code></pre></div></div>

<p>You can do your implementation within the callable but in our example our target directory is the services folder where our classes is located.</p>

<p><code class="language-plaintext highlighter-rouge">spl_autoload_register</code> accepts a <a href="http://php.net/manual/en/language.types.callable.php">callable</a> as the first parameter.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * @param callable $autoload_function 
 * @param bool     $throw 	whether to throw exceptions when the autoload_function cannot be registered.
 * @param bool     $prepend 	whether to prepend the autoloader on the autoload stack
 */
spl_autoload_register(callable $autoload_function, $throw = true, $prepend = false)
</code></pre></div></div>

<p>Another way to do autoloading is the <code class="language-plaintext highlighter-rouge">__autoload()</code> function. We can achieve the same as above 
with the following code.</p>

<p><code class="language-plaintext highlighter-rouge">bootstrap.php</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function __autoload(string $class) {
	if(file_exists($path =  __DIR__.'/services/'.$class.'.php')) {
		require_once $path;
	}
}
</code></pre></div></div>

<p>By default <code class="language-plaintext highlighter-rouge">spl_autoload_register</code> replace the engine cache for <code class="language-plaintext highlighter-rouge">__autoload()</code> function. So if you
definde a <code class="language-plaintext highlighter-rouge">spl_autoload_register</code> then it will be use.</p>

<p>The use of <code class="language-plaintext highlighter-rouge">__autoload()</code> is discourage and may be depreciated or remove later on in favor of <code class="language-plaintext highlighter-rouge">spl_autoload_register</code> because the later provides a more flexible alternative for autoloading classes.</p>

<p>Let me know your comments!</p>

:ET