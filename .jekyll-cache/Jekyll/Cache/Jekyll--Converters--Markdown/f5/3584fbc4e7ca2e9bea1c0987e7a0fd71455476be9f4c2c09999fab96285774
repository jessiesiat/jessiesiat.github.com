I"h<p>First what is a callback?</p>

<blockquote>
  <p>In computer programming, a callback is a piece of executable code that is 
passed as an argument to other code, which is expected to call back (execute) 
the argument at some convenient time.</p>

  <p><a href="http://en.wikipedia.org/wiki/Callback_(computer_programming)">definition</a> from wikipedia</p>
</blockquote>

<p>Clearly said.</p>

<p>Callbacks can be declared using a user-defined function including anonymous function or an array of Object at index[0] and a method at index [1]. e.g.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$function_callback = function($x) {
	return $x * 2;
}

$object_method_callback = array($object, 'method');
// -- or -- for static methods
// array('MyClass', 'method')
// 'MyClass::method'
</code></pre></div></div>

<blockquote>
  <p>Callback is denoted by <code class="language-plaintext highlighter-rouge">callable</code> type hint</p>
</blockquote>

<p>This is usefull when using built-in PHP functions that accepts callbacks as one of its parameter. Functions such
as <code class="language-plaintext highlighter-rouge">array_filter</code>, <code class="language-plaintext highlighter-rouge">usort</code>, <code class="language-plaintext highlighter-rouge">call_user_func</code>, <code class="language-plaintext highlighter-rouge">call_user_func_array</code>, <code class="language-plaintext highlighter-rouge">forward_static_call</code>, <code class="language-plaintext highlighter-rouge">forward_static_call</code>, etc.</p>

<p>Example using <code class="language-plaintext highlighter-rouge">array_filter</code> to filter elements in an array.</p>

<p>Syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * @param $array     array  	The array to filter
 * @param $callback  callable	The callback  
 * @returns array
 */
array_filter ( array $array [, callable $callback ] );
</code></pre></div></div>

<p>Below we use <a href="http://php.net/manual/en/functions.anonymous.php">anonymouse</a> function for the callback.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// create array with values from 1 to 20
$array = range(1, 20);

$new_arr = array_filter($array, function($value) {
	return ($value % 2) == 0;
});

// prints new set of array which is divisible by 2
print_r($new_arr);
</code></pre></div></div>

<p>â€¦is accomplished with the same code below by passing the name of callback function as second argument.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function divisibleByTwo($value) {
	return ($value % 2) == 0;
}

$array = range(1, 20);

$new_arr = array_filter($array, 'divisibleByTwo');

print_r($new_arr);
</code></pre></div></div>

<p>How about callback using an array of Class and method? Example below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Number {
	public static function divisibleByTwo($value) {
		return ($value % 2) == 0;
	}
}
	
$array = range(1, 20);

$new_arr = array_filter($array, array('Number', 'divisibleByTwo'));

print_r($new_arr);
</code></pre></div></div>

<p>Callback is such a powerfull tool, and as always learning the basics would give you a good foundation.</p>

:ET